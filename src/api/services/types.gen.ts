// This file is auto-generated by @hey-api/openapi-ts

export type Stats = {
    questionnaires?: {
        rating: number;
    };
};

export type Unauthorized = {
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present its value is assumed to be 'about:blank'.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status: 401;
};

export type Forbidden = {
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present its value is assumed to be 'about:blank'.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status: 403;
};

export type InternalServerError = {
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present its value is assumed to be 'about:blank'.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status: 500;
};

export type NotFound = {
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present its value is assumed to be 'about:blank'.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status: 404;
};

export type BadRequest = {
    /**
     * An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present its value is assumed to be 'about:blank'.
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status: 400;
};

export type $OpenApiTs = {
    '/stats': {
        get: {
            res: {
                /**
                 * Statistics for Dashboard page
                 */
                200: Array<Stats>;
                /**
                 * Invalid or no authorisation provided.
                 *
                 */
                401: Unauthorized;
                /**
                 * Insufficient access.
                 *
                 */
                403: Forbidden;
                /**
                 * The server encountered an unexpected condition that prevented it from fulfilling the request.
                 *
                 */
                500: InternalServerError;
            };
        };
    };
};